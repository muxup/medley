#!/usr/bin/env python3

# Copyright Muxup contributors.
# Distributed under the terms of the MIT-0 license, see LICENSE for details.
# SPDX-License-Identifier: MIT-0

import argparse
import fnmatch
import pathlib
import re
import subprocess
import sys
from collections import defaultdict
from dataclasses import dataclass
from enum import Enum


@dataclass
class MIInfo:
    pc: int
    mnemonic: str
    operands: str
    width: int


@dataclass
class TBInfo:
    pc: int
    tcount: int
    icount: int
    ecount: int
    fn_name: str
    loc_desc: str
    insts: list[MIInfo]


tbs = {}


class StatParseState(Enum):
    SEEKING_HEADER_1 = 1
    SEEKING_HEADER_2 = 2
    PARSING_ENTRIES = 3


def parse_qemu_out(log_path):
    # Parse information from log. It's possible that the expected log output is
    # interspersed with other output (e.g. other stderr output from the program,
    # or output from other qemu plugins). So adopt a resilient parsing approach.
    total_execed_instcount = 0
    with log_path.open() as file:
        current_state = StatParseState.SEEKING_HEADER_1
        expected_max_entries = (2**64) - 1
        for line in file:
            if current_state == StatParseState.SEEKING_HEADER_1:
                match = re.match(
                    r"^collected (\d+) entries in the hash table \(showing up to (\d+)\)",
                    line,
                )
                if not match:
                    continue
                if match.group(2) != str(expected_max_entries):
                    print(
                        "Warning: there was a limit on the number of collected hot blocks",
                        file=sys.stderr,
                    )
                current_state = StatParseState.SEEKING_HEADER_2
            elif current_state == StatParseState.SEEKING_HEADER_2:
                if line != "pc, tcount, icount, ecount\n":
                    continue
                current_state = StatParseState.PARSING_ENTRIES
            else:
                try:
                    pc, tcount, icount, ecount = line.strip("\n").split(", ")
                    pc, tcount, icount, ecount = (
                        int(pc, 16),
                        int(tcount),
                        int(icount),
                        int(ecount),
                    )
                except ValueError:
                    continue

                total_execed_instcount += icount * ecount
                if pc in tbs:
                    tbs[pc].tcount += tcount
                    tbs[pc].ecount += ecount
                    if tbs[pc].icount != icount:
                        print(
                            f"Warning: mismatched icount. {icount} for {pc} from {log_path} doesnt equal previously read icount {tbs[pc].icount}"
                        )
                else:
                    tbs[pc] = TBInfo(pc, tcount, icount, ecount, "", "", [])

    print(
        f"Collected information from {log_path} on {len(tbs)} TBs, and {total_execed_instcount} dynamically executed instructions"
    )
    return total_execed_instcount


disasm_map = {}


def process_bin_with_objdump(bin_path, no_profile_data):
    processed_insts = 0
    process = subprocess.Popen(
        ["llvm-objdump", "-d", "--section=.text", bin_path],
        stdout=subprocess.PIPE,
        stderr=None,
        text=True,
        bufsize=1,
    )

    # One subtlety in the below code is that translation blocks (TBs) may overlap,
    # meaning we need to keep track of which TBs we are currently in to ensure
    # instructions are added to all of them.

    cur_fn = None
    cur_fn_addr = None
    active_tbs = []
    symbol_def_re = re.compile(r"^([0-9a-f]+)\s+<([^>]+)>:$")
    insn_re = re.compile(r"^\s*([0-9a-f]+):\s+([0-9a-f]+)\s+([\w.]+)(?:\s+(.+))?$")

    for line in process.stdout:
        if match := symbol_def_re.match(line):
            cur_fn_addr, cur_fn = match.groups()
            cur_fn_addr = int(cur_fn_addr, 16)
            if no_profile_data:
                # Create a TB for the whole symbol if we have no profile data.
                # We'll update the instruction count later.
                tb_for_fn = TBInfo(cur_fn_addr, 1, 0, 1, cur_fn, f"<{cur_fn}>", [])
                tbs[cur_fn_addr] = tb_for_fn
                active_tbs = [tb_for_fn]
        elif match := insn_re.match(line):
            processed_insts += 1
            addr, enc, mnemonic, operands = match.groups()
            addr = int(addr, 16)
            if cur_fn is None:
                raise SystemExit(
                    f"Encountered instruction at {addr:x} outside of any function"
                )
            cur_insn = MIInfo(addr, mnemonic, operands, len(enc) >> 1)
            disasm_map[addr] = cur_insn
            if not no_profile_data:
                if addr in tbs:
                    offset_in_fn = addr - cur_fn_addr
                    tbs[addr].loc_desc = (
                        f"<{cur_fn}+{offset_in_fn:x}>"
                        if offset_in_fn
                        else f"<{cur_fn}>"
                    )
                    tbs[addr].fn_name = cur_fn
                    new_tb = tbs[addr]
                    active_tbs.append((new_tb, new_tb.icount))

                # Process the instruction for all active translation blocks
                for i, (tb_info, remaining) in enumerate(active_tbs):
                    if remaining > 0:
                        tb_info.insts.append(cur_insn)
                        active_tbs[i] = (tb_info, remaining - 1)
                # Filter out completed TBs with a list comprehension
                active_tbs = [
                    (tb_info, remaining)
                    for tb_info, remaining in active_tbs
                    if remaining > 0
                ]
            else:
                # If we have no profile data, we must have only one item in
                # active_tbs (a tb representing the whole function) and just
                # need to add the instruction to it.
                tb_for_fn = active_tbs[0]
                tb_for_fn.insts.append(cur_insn)
                tb_for_fn.icount += 1
        elif line == "\n":
            continue
        elif "file format elf" in line:
            continue
        elif line == "Disassembly of section .text:\n":
            continue
        else:
            print(f"!!!!! skipping '{line}'")

    returncode = process.wait()
    if returncode != 0:
        raise subprocess.CalledProcessError(returncode, process.args)
    return processed_insts


def analysis_dump(tb_list, total_exec_inst_count, extra_cmndline_args):
    tb_count = len(tb_list)
    cur_tb_num = 1
    for tb in tb_list:
        print(
            f"TB {cur_tb_num}/{tb_count}: {hex(tb.pc)} {tb.loc_desc} ({tb.icount} insts executed {tb.ecount} times)"
        )
        for inst in tb.insts:
            print(f"{hex(inst.pc)}: {inst.mnemonic} {inst.operands}")
        print()
        cur_tb_num += 1


def analysis_exec(tb_list, total_execed_inst_count, extra_cmdline_args):
    tb_list_execed_inst_count = 0
    for tb in tb_list:
        tb_list_execed_inst_count += tb.icount * tb.ecount
    pct_tb_list_execed_insts = (
        tb_list_execed_inst_count / total_execed_inst_count
    ) * 100
    print(
        f"{pct_tb_list_execed_insts:.2f}% of execed instructions ({tb_list_execed_inst_count}/{total_execed_inst_count})"
    )


def analysis_mnemonic(tb_list, total_exec_inst_count, extra_cmdline_args):
    histogram = {}
    for tb in tb_list:
        for inst in tb.insts:
            if inst.mnemonic in histogram:
                histogram[inst.mnemonic] += 1 * tb.ecount
            else:
                histogram[inst.mnemonic] = 1 * tb.ecount
    sorted_histogram = dict(sorted(histogram.items(), key=lambda x: x[1], reverse=True))
    if extra_cmdline_args:
        print(
            f"INFO: Printing only mnemonics that match the patterns: {extra_cmdline_args}\n"
        )
        for k, v in sorted_histogram.items():
            if any(fnmatch.fnmatch(k, pattern) for pattern in extra_cmdline_args):
                print(k, v)
    else:
        for k, v in sorted_histogram.items():
            print(k, v)


def analysis_badinsn(tb_list, total_exec_inst_count, extra_cmdline_args):
    for tb in tb_list:
        for inst in tb.insts:
            if inst.mnemonic == "mv" or inst.mnemonic.startswith("fmv"):
                ops = inst.operands.split(",")
                if len(ops) >= 2 and ops[0] == ops[1]:
                    print(
                        "Found redundant mv in {tb.fn_name}: {inst.pc:x} {inst.mnemonic} {inst.operands} (execed {tb.icount} times)"
                    )


inst_types = {
    # RV32I/RV64I base instructions
    "lui": ["ext_i", "int_alu"],
    "auipc": ["ext_i", "int_alu"],
    "jal": ["ext_i", "control_flow/call", "control_flow"],
    "jalr": ["ext_i", "control_flow/call", "control_flow"],
    "beq": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bne": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "blt": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bge": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bltu": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bgeu": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "lb": ["ext_i", "scalar_load"],
    "lh": ["ext_i", "scalar_load"],
    "lw": ["ext_i", "scalar_load"],
    "lbu": ["ext_i", "scalar_load"],
    "lhu": ["ext_i", "scalar_load"],
    "sb": ["ext_i", "scalar_store"],
    "sh": ["ext_i", "scalar_store"],
    "sw": ["ext_i", "scalar_store"],
    "addi": ["ext_i", "int_alu"],
    "slti": ["ext_i", "int_alu"],
    "sltiu": ["ext_i", "int_alu"],
    "xori": ["ext_i", "int_alu"],
    "ori": ["ext_i", "int_alu"],
    "andi": ["ext_i", "int_alu"],
    "add": ["ext_i", "int_alu"],
    "sub": ["ext_i", "int_alu"],
    "sll": ["ext_i", "int_alu"],
    "slt": ["ext_i", "int_alu"],
    "sltu": ["ext_i", "int_alu"],
    "xor": ["ext_i", "int_alu"],
    "srl": ["ext_i", "int_alu"],
    "sra": ["ext_i", "int_alu"],
    "or": ["ext_i", "int_alu"],
    "and": ["ext_i", "int_alu"],
    "fence": ["ext_i"],
    "fence.tso": ["ext_i"],
    "ecall": ["ext_i"],
    "ebreak": ["ext_i"],
    "lwu": ["ext_i", "scalar_load"],
    "ld": ["ext_i", "scalar_load"],
    "sd": ["ext_i", "scalar_store"],
    "slli": ["ext_i", "int_alu"],
    "srli": ["ext_i", "int_alu"],
    "srai": ["ext_i", "int_alu"],
    "addiw": ["ext_i", "int_alu"],
    "slliw": ["ext_i", "int_alu"],
    "srliw": ["ext_i", "int_alu"],
    "sraiw": ["ext_i", "int_alu"],
    "addw": ["ext_i", "int_alu"],
    "subw": ["ext_i", "int_alu"],
    "sllw": ["ext_i", "int_alu"],
    "srlw": ["ext_i", "int_alu"],
    "sraw": ["ext_i", "int_alu"],
    # RV32I/RV64I pseudos
    "nop": ["ext_i", "int_alu"],
    "li": ["ext_i", "int_alu"],
    "mv": ["ext_i", "int_move"],
    "not": ["ext_i", "int_alu"],
    "neg": ["ext_i", "int_alu"],
    "negw": ["ext_i", "int_alu"],
    "sext.w": ["ext_i", "int_alu"],
    "seqz": ["ext_i", "int_alu"],
    "snez": ["ext_i", "int_alu"],
    "sltz": ["ext_i", "int_alu"],
    "sgtz": ["ext_i", "int_alu"],
    "sgt": ["ext_i", "int_alu"],
    "sgtu": ["ext_i"],
    "beqz": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bnez": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "blez": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bgez": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bltz": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bgtz": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bgt": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "ble": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "bleu": ["ext_i", "control_flow/cond_branch", "control_flow"],
    "j": ["ext_i", "control_flow/jump", "control_flow"],
    "jr": ["ext_i", "control_flow/jump", "control_flow"],
    "call": ["ext_i", "control_flow/call", "control_flow"],
    "ret": ["ext_i", "control_flow/ret", "control_flow"],
    "pause": ["ext_i"],
    "zext.b": ["ext_i", "int_alu"],
    "unimp": ["ext_i"],
    # Zicsr instructions
    "csrrw": ["ext_zicsr"],
    "csrrs": ["ext_zicsr"],
    "csrrc": ["ext_zicsr"],
    "csrrwi": ["ext_zicsr"],
    "csrrsi": ["ext_zicsr"],
    "csrrci": ["ext_zicsr"],
    # Zicsr pseudos
    "csrr": ["ext_zicsr"],
    "csrw": ["ext_zicsr"],
    "csrs": ["ext_zicsr"],
    "csrc": ["ext_zicsr"],
    "csrwi": ["ext_zicsr"],
    "csrsi": ["ext_zicsr"],
    "csrci": ["ext_zicsr"],
    # M instructions
    "mul": ["ext_m", "int_mul"],
    "mulh": ["ext_m", "int_mul"],
    "mulhsu": ["ext_m", "int_mul"],
    "mulhu": ["ext_m", "int_mul"],
    "div": ["ext_m", "int_div"],
    "divu": ["ext_m", "int_div"],
    "rem": ["ext_m", "int_div"],
    "remu": ["ext_m", "int_div"],
    "mulw": ["ext_m", "int_mul"],
    "divw": ["ext_m", "int_div"],
    "divuw": ["ext_m", "int_div"],
    "remw": ["ext_m", "int_div"],
    "remuw": ["ext_m", "int_div"],
    # A instructions
    "lr.w": ["ext_a"],
    "sc.w": ["ext_a"],
    "amoswap.w": ["ext_a"],
    "amoadd.w": ["ext_a"],
    "amoxor.w": ["ext_a"],
    "amoand.w": ["ext_a"],
    "amoor.w": ["ext_a"],
    "amomin.w": ["ext_a"],
    "amomax.w": ["ext_a"],
    "amominu.w": ["ext_a"],
    "amomaxu.w": ["ext_a"],
    "lr.d": ["ext_a"],
    "sc.d": ["ext_a"],
    "amoswap.d": ["ext_a"],
    "amoadd.d": ["ext_a"],
    "amoxor.d": ["ext_a"],
    "amoand.d": ["ext_a"],
    "amoor.d": ["ext_a"],
    "amomin.d": ["ext_a"],
    "amomax.d": ["ext_a"],
    "amominu.d": ["ext_a"],
    "amomaxu.d": ["ext_a"],
    # B instructions
    "sh1add": ["ext_b", "int_alu"],
    "sh2add": ["ext_b", "int_alu"],
    "sh3add": ["ext_b", "int_alu"],
    "add.uw": ["ext_b", "int_alu"],
    "sh1add.uw": ["ext_b", "int_alu"],
    "sh2add.uw": ["ext_b", "int_alu"],
    "sh3add.uw": ["ext_b", "int_alu"],
    "slli.uw": ["ext_b", "int_alu"],
    "andn": ["ext_b", "int_alu"],
    "orn": ["ext_b", "int_alu"],
    "xnor": ["ext_b", "int_alu"],
    "clz": ["ext_b", "int_alu"],
    "ctz": ["ext_b", "int_alu"],
    "cpop": ["ext_b", "int_alu"],
    "max": ["ext_b", "int_alu"],
    "maxu": ["ext_b", "int_alu"],
    "min": ["ext_b", "int_alu"],
    "minu": ["ext_b", "int_alu"],
    "zext.h": ["ext_b", "int_alu"],
    "sext.b": ["ext_b", "int_alu"],
    "sext.h": ["ext_b", "int_alu"],
    "rol": ["ext_b", "int_alu"],
    "ror": ["ext_b", "int_alu"],
    "clzw": ["ext_b", "int_alu"],
    "ctzw": ["ext_b", "int_alu"],
    "cpopw": ["ext_b", "int_alu"],
    "rolw": ["ext_b", "int_alu"],
    "rorw": ["ext_b", "int_alu"],
    "roriw": ["ext_b", "int_alu"],
    "rori": ["ext_b", "int_alu"],
    "bclr": ["ext_b", "int_alu"],
    "bext": ["ext_b", "int_alu"],
    "binv": ["ext_b", "int_alu"],
    "bset": ["ext_b", "int_alu"],
    "bclri": ["ext_b", "int_alu"],
    "bexti": ["ext_b", "int_alu"],
    "binvi": ["ext_b", "int_alu"],
    "bseti": ["ext_b", "int_alu"],
    "rev8": ["ext_b", "int_alu"],
    # B pseudos
    "zext.w": ["ext_b", "int_alu"],
    # F instructions
    "flw": ["ext_f", "scalar_load"],
    "fsw": ["ext_f", "scalar_store"],
    "fmadd.s": ["ext_f", "fp_fma"],
    "fmsub.s": ["ext_f", "fp_fma"],
    "fnmsub.s": ["ext_f", "fp_fma"],
    "fnmadd.s": ["ext_f", "fp_fma"],
    "fadd.s": ["ext_f", "fp_alu"],
    "fsub.s": ["ext_f", "fp_alu"],
    "fmul.s": ["ext_f", "fp_mul"],
    "fdiv.s": ["ext_f", "fp_div"],
    "fsqrt.s": ["ext_f"],
    "fsgnj.s": ["ext_f", "fp_alu"],
    "fsgnjn.s": ["ext_f", "fp_alu"],
    "fsgnjx.s": ["ext_f", "fp_alu"],
    "fmin.s": ["ext_f", "fp_alu"],
    "fmax.s": ["ext_f", "fp_alu"],
    "fcvt.w.s": ["ext_f", "fp_to_int"],
    "fcvt.wu.s": ["ext_f", "fp_to_int"],
    "fmv.x.w": ["ext_f", "fp_to_int"],
    "feq.s": ["ext_f", "fp_alu"],
    "flt.s": ["ext_f", "fp_alu"],
    "fle.s": ["ext_f", "fp_alu"],
    "fclass.s": ["ext_f", "fp_alu"],
    "fcvt.s.w": ["ext_f", "int_to_fp"],
    "fcvt.s.wu": ["ext_f", "int_to_fp"],
    "fmv.w.x": ["ext_f", "int_to_fp"],
    "fcvt.l.s": ["ext_f", "fp_to_int"],
    "fcvt.lu.s": ["ext_f", "fp_to_int"],
    "fcvt.s.l": ["ext_f", "int_to_fp"],
    "fcvt.s.lu": ["ext_f", "int_to_fp"],
    # F pseudos
    "frcsr": ["ext_f"],
    "fscsr": ["ext_f"],
    "frrm": ["ext_f"],
    "fsrm": ["ext_f"],
    "fsrmi": ["ext_f"],
    "frflags": ["ext_f"],
    "fsflags": ["ext_f"],
    "fsflagsi": ["ext_f"],
    "fmv.s": ["ext_f", "fp_move"],
    "fabs.s": ["ext_f"],
    "fneg.s": ["ext_f"],
    "fgt.s": ["ext_f"],
    "fge.s": ["ext_f"],
    # D instructions
    "fld": ["ext_d", "scalar_load"],
    "fsd": ["ext_d", "scalar_store"],
    "fmadd.d": ["ext_d", "fp_fma"],
    "fmsub.d": ["ext_d", "fp_fma"],
    "fnmsub.d": ["ext_d", "fp_fma"],
    "fnmadd.d": ["ext_d", "fp_fma"],
    "fadd.d": ["ext_d", "fp_alu"],
    "fsub.d": ["ext_d", "fp_alu"],
    "fmul.d": ["ext_d", "fp_mul"],
    "fdiv.d": ["ext_d", "fp_div"],
    "fsqrt.d": ["ext_d"],
    "fsgnj.d": ["ext_d", "fp_alu"],
    "fsgnjn.d": ["ext_d", "fp_alu"],
    "fsgnjx.d": ["ext_d", "fp_alu"],
    "fmin.d": ["ext_d", "fp_alu"],
    "fmax.d": ["ext_d", "fp_alu"],
    "fcvt.s.d": ["ext_d", "fp_convert"],
    "fcvt.d.s": ["ext_d", "fp_convert"],
    "feq.d": ["ext_d", "fp_alu"],
    "flt.d": ["ext_d", "fp_alu"],
    "fle.d": ["ext_d", "fp_alu"],
    "fclass.d": ["ext_d", "fp_alu"],
    "fcvt.w.d": ["ext_d", "fp_to_int"],
    "fcvt.wu.d": ["ext_d", "fp_to_int"],
    "fcvt.d.w": ["ext_d", "int_to_fp"],
    "fcvt.d.wu": ["ext_d", "int_to_fp"],
    "fcvt.l.d": ["ext_d", "int_to_fp"],
    "fcvt.lu.d": ["ext_d", "int_to_fp"],
    "fmv.x.d": ["ext_d", "fp_to_int"],
    "fcvt.d.l": ["ext_d", "int_to_fp"],
    "fcvt.d.lu": ["ext_d", "int_to_fp"],
    "fmv.d.x": ["ext_d", "int_to_fp"],
    # D pseudos
    "fmv.d": ["ext_d", "fp_move"],
    "fabs.d": ["ext_d", "fp_alu"],
    "fneg.d": ["ext_d", "fp_alu"],
    "fgt.d": ["ext_d", "fp_alu"],
    "fge.d": ["ext_d", "fp_alu"],
    # Zicond instructions
    "czero.eqz": ["ext_zicond", "int_alu"],
    "czero.nez": ["ext_zicond", "int_alu"],
    # V instructions
    "vsetivli": ["ext_v"],
    "vsetvli": ["ext_v"],
    "vsetvl": ["ext_v"],
    "vlm.v": ["ext_v"],
    "vsm.v": ["ext_v"],
    "vle8.v": ["ext_v"],
    "vle16.v": ["ext_v"],
    "vle32.v": ["ext_v"],
    "vle64.v": ["ext_v"],
    "vse8.v": ["ext_v"],
    "vse16.v": ["ext_v"],
    "vse32.v": ["ext_v"],
    "vse64.v": ["ext_v"],
    "vluxei8.v": ["ext_v"],
    "vluxei16.v": ["ext_v"],
    "vluxei32.v": ["ext_v"],
    "vluxei64.v": ["ext_v"],
    "vsuxei8.v": ["ext_v"],
    "vsuxei16.v": ["ext_v"],
    "vsuxei32.v": ["ext_v"],
    "vsuxei64.v": ["ext_v"],
    "vlse8.v": ["ext_v"],
    "vlse16.v": ["ext_v"],
    "vlse32.v": ["ext_v"],
    "vlse64.v": ["ext_v"],
    "vsse8.v": ["ext_v"],
    "vsse16.v": ["ext_v"],
    "vsse32.v": ["ext_v"],
    "vsse64.v": ["ext_v"],
    "vloxei8.v": ["ext_v"],
    "vloxei16.v": ["ext_v"],
    "vloxei32.v": ["ext_v"],
    "vloxei64.v": ["ext_v"],
    "vsoxei8.v": ["ext_v"],
    "vsoxei16.v": ["ext_v"],
    "vsoxei32.v": ["ext_v"],
    "vsoxei64.v": ["ext_v"],
    "vle8ff.v": ["ext_v"],
    "vle16ff.v": ["ext_v"],
    "vle32ff.v": ["ext_v"],
    "vle64ff.v": ["ext_v"],
    "vl1re8.v": ["ext_v"],
    "vl1re16.v": ["ext_v"],
    "vl1re32.v": ["ext_v"],
    "vl1re64.v": ["ext_v"],
    "vl2re8.v": ["ext_v"],
    "vl2re16.v": ["ext_v"],
    "vl2re32.v": ["ext_v"],
    "vl2re64.v": ["ext_v"],
    "vl4re8.v": ["ext_v"],
    "vl4re16.v": ["ext_v"],
    "vl4re32.v": ["ext_v"],
    "vl4re64.v": ["ext_v"],
    "vl8re8.v": ["ext_v"],
    "vl8re16.v": ["ext_v"],
    "vl8re32.v": ["ext_v"],
    "vl8re64.v": ["ext_v"],
    "vs1r.v": ["ext_v"],
    "vs2r.v": ["ext_v"],
    "vs4r.v": ["ext_v"],
    "vs8r.v": ["ext_v"],
    "vfadd.vf": ["ext_v"],
    "vfsub.vf": ["ext_v"],
    "vfmin.vf": ["ext_v"],
    "vfmax.vf": ["ext_v"],
    "vfsgnj.vf": ["ext_v"],
    "vfsgnjn.vf": ["ext_v"],
    "vfsgnjx.vf": ["ext_v"],
    "vfslide1up.vf": ["ext_v"],
    "vfslide1down.vf": ["ext_v"],
    "vfmv.s.f": ["ext_v"],
    "vfmerge.vfm": ["ext_v"],
    "vfmv.v.f": ["ext_v"],
    "vmfeq.vf": ["ext_v"],
    "vmfle.vf": ["ext_v"],
    "vmflt.vf": ["ext_v"],
    "vmfne.vf": ["ext_v"],
    "vmfgt.vf": ["ext_v"],
    "vmfge.vf": ["ext_v"],
    "vfdiv.vf": ["ext_v"],
    "vfrdiv.vf": ["ext_v"],
    "vfmul.vf": ["ext_v"],
    "vfrsub.vf": ["ext_v"],
    "vfmadd.vf": ["ext_v"],
    "vfnmadd.vf": ["ext_v"],
    "vfmsub.vf": ["ext_v"],
    "vfnmsub.vf": ["ext_v"],
    "vfmacc.vf": ["ext_v"],
    "vfnmacc.vf": ["ext_v"],
    "vfmsac.vf": ["ext_v"],
    "vfnmsac.vf": ["ext_v"],
    "vfwadd.vf": ["ext_v"],
    "vfwsub.vf": ["ext_v"],
    "vfwadd.wf": ["ext_v"],
    "vfwsub.wf": ["ext_v"],
    "vfwmul.vf": ["ext_v"],
    "vfwmacc.vf": ["ext_v"],
    "vfwnmacc.vf": ["ext_v"],
    "vfwmsac.vf": ["ext_v"],
    "vfwnmsac.vf": ["ext_v"],
    "vfadd.vv": ["ext_v"],
    "vfredusum.vs": ["ext_v"],
    "vfsub.vv": ["ext_v"],
    "vfredosum.vs": ["ext_v"],
    "vfmin.vv": ["ext_v"],
    "vfredmin.vs": ["ext_v"],
    "vfmax.vv": ["ext_v"],
    "vfredmax.vs": ["ext_v"],
    "vfsgnj.vv": ["ext_v"],
    "vfsgnjn.vv": ["ext_v"],
    "vfsgnjx.vv": ["ext_v"],
    "vfmv.f.s": ["ext_v"],
    "vmfeq.vv": ["ext_v"],
    "vmfle.vv": ["ext_v"],
    "vmflt.vv": ["ext_v"],
    "vmfne.vv": ["ext_v"],
    "vfdiv.vv": ["ext_v"],
    "vfmul.vv": ["ext_v"],
    "vfmadd.vv": ["ext_v"],
    "vfnmadd.vv": ["ext_v"],
    "vfmsub.vv": ["ext_v"],
    "vfnmsub.vv": ["ext_v"],
    "vfmacc.vv": ["ext_v"],
    "vfnmacc.vv": ["ext_v"],
    "vfmsac.vv": ["ext_v"],
    "vfnmsac.vv": ["ext_v"],
    "vfcvt.xu.f.v": ["ext_v"],
    "vfcvt.x.f.v": ["ext_v"],
    "vfcvt.f.xu.v": ["ext_v"],
    "vfcvt.f.x.v": ["ext_v"],
    "vfcvt.rtz.xu.f.v": ["ext_v"],
    "vfcvt.rtz.x.f.v": ["ext_v"],
    "vfwcvt.xu.f.v": ["ext_v"],
    "vfwcvt.x.f.v": ["ext_v"],
    "vfwcvt.f.xu.v": ["ext_v"],
    "vfwcvt.f.x.v": ["ext_v"],
    "vfwcvt.f.f.v": ["ext_v"],
    "vfwcvt.rtz.xu.f.v": ["ext_v"],
    "vfwcvt.rtz.x.f.v": ["ext_v"],
    "vfncvt.xu.f.w": ["ext_v"],
    "vfncvt.x.f.w": ["ext_v"],
    "vfncvt.f.xu.w": ["ext_v"],
    "vfncvt.f.x.w": ["ext_v"],
    "vfncvt.f.f.w": ["ext_v"],
    "vfncvt.rod.f.f.w": ["ext_v"],
    "vfncvt.rtz.xu.f.w": ["ext_v"],
    "vfncvt.rtz.x.f.w": ["ext_v"],
    "vfsqrt.v": ["ext_v"],
    "vfrsqrt7.v": ["ext_v"],
    "vfrec7.v": ["ext_v"],
    "vfclass.v": ["ext_v"],
    "vfwadd.vv": ["ext_v"],
    "vfwredusum.vs": ["ext_v"],
    "vfwsub.vv": ["ext_v"],
    "vfwredosum.vs": ["ext_v"],
    "vfwadd.wv": ["ext_v"],
    "vfwsub.wv": ["ext_v"],
    "vfwmul.vv": ["ext_v"],
    "vfwmacc.vv": ["ext_v"],
    "vfwnmacc.vv": ["ext_v"],
    "vfwmsac.vv": ["ext_v"],
    "vfwnmsac.vv": ["ext_v"],
    "vadd.vx": ["ext_v"],
    "vsub.vx": ["ext_v"],
    "vrsub.vx": ["ext_v"],
    "vminu.vx": ["ext_v"],
    "vmin.vx": ["ext_v"],
    "vmaxu.vx": ["ext_v"],
    "vmax.vx": ["ext_v"],
    "vand.vx": ["ext_v"],
    "vor.vx": ["ext_v"],
    "vxor.vx": ["ext_v"],
    "vrgather.vx": ["ext_v"],
    "vslideup.vx": ["ext_v"],
    "vslidedown.vx": ["ext_v"],
    "vadc.vxm": ["ext_v"],
    "vmadc.vxm": ["ext_v"],
    "vmadc.vx": ["ext_v"],
    "vsbc.vxm": ["ext_v"],
    "vmsbc.vxm": ["ext_v"],
    "vmsbc.vx": ["ext_v"],
    "vmerge.vxm": ["ext_v"],
    "vmv.v.x": ["ext_v"],
    "vmseq.vx": ["ext_v"],
    "vmsne.vx": ["ext_v"],
    "vmsltu.vx": ["ext_v"],
    "vmslt.vx": ["ext_v"],
    "vmsleu.vx": ["ext_v"],
    "vmsle.vx": ["ext_v"],
    "vmsgtu.vx": ["ext_v"],
    "vmsgt.vx": ["ext_v"],
    "vsaddu.vx": ["ext_v"],
    "vsadd.vx": ["ext_v"],
    "vssubu.vx": ["ext_v"],
    "vssub.vx": ["ext_v"],
    "vsll.vx": ["ext_v"],
    "vsmul.vx": ["ext_v"],
    "vsrl.vx": ["ext_v"],
    "vsra.vx": ["ext_v"],
    "vssrl.vx": ["ext_v"],
    "vssra.vx": ["ext_v"],
    "vnsrl.wx": ["ext_v"],
    "vnsra.wx": ["ext_v"],
    "vnclipu.wx": ["ext_v"],
    "vnclip.wx": ["ext_v"],
    "vadd.vv": ["ext_v"],
    "vsub.vv": ["ext_v"],
    "vminu.vv": ["ext_v"],
    "vmin.vv": ["ext_v"],
    "vmaxu.vv": ["ext_v"],
    "vmax.vv": ["ext_v"],
    "vand.vv": ["ext_v"],
    "vor.vv": ["ext_v"],
    "vxor.vv": ["ext_v"],
    "vrgather.vv": ["ext_v"],
    "vrgatherei16.vv": ["ext_v"],
    "vadc.vvm": ["ext_v"],
    "vmadc.vvm": ["ext_v"],
    "vmadc.vv": ["ext_v"],
    "vsbc.vvm": ["ext_v"],
    "vmsbc.vvm": ["ext_v"],
    "vmsbc.vv": ["ext_v"],
    "vmerge.vvm": ["ext_v"],
    "vmv.v.v": ["ext_v"],
    "vmseq.vv": ["ext_v"],
    "vmsne.vv": ["ext_v"],
    "vmsltu.vv": ["ext_v"],
    "vmslt.vv": ["ext_v"],
    "vmsleu.vv": ["ext_v"],
    "vmsle.vv": ["ext_v"],
    "vsaddu.vv": ["ext_v"],
    "vsadd.vv": ["ext_v"],
    "vssubu.vv": ["ext_v"],
    "vssub.vv": ["ext_v"],
    "vsll.vv": ["ext_v"],
    "vsmul.vv": ["ext_v"],
    "vsrl.vv": ["ext_v"],
    "vsra.vv": ["ext_v"],
    "vssrl.vv": ["ext_v"],
    "vssra.vv": ["ext_v"],
    "vnsrl.wv": ["ext_v"],
    "vnsra.wv": ["ext_v"],
    "vnclipu.wv": ["ext_v"],
    "vnclip.wv": ["ext_v"],
    "vwredsumu.vs": ["ext_v"],
    "vwredsum.vs": ["ext_v"],
    "vadd.vi": ["ext_v"],
    "vrsub.vi": ["ext_v"],
    "vand.vi": ["ext_v"],
    "vor.vi": ["ext_v"],
    "vxor.vi": ["ext_v"],
    "vrgather.vi": ["ext_v"],
    "vslideup.vi": ["ext_v"],
    "vslidedown.vi": ["ext_v"],
    "vadc.vim": ["ext_v"],
    "vmadc.vim": ["ext_v"],
    "vmadc.vi": ["ext_v"],
    "vmerge.vim": ["ext_v"],
    "vmv.v.i": ["ext_v"],
    "vmseq.vi": ["ext_v"],
    "vmsne.vi": ["ext_v"],
    "vmsleu.vi": ["ext_v"],
    "vmsle.vi": ["ext_v"],
    "vmsgtu.vi": ["ext_v"],
    "vmsgt.vi": ["ext_v"],
    "vsaddu.vi": ["ext_v"],
    "vsadd.vi": ["ext_v"],
    "vsll.vi": ["ext_v"],
    "vmv1r.v": ["ext_v"],
    "vmv2r.v": ["ext_v"],
    "vmv4r.v": ["ext_v"],
    "vmv8r.v": ["ext_v"],
    "vsrl.vi": ["ext_v"],
    "vsra.vi": ["ext_v"],
    "vssrl.vi": ["ext_v"],
    "vssra.vi": ["ext_v"],
    "vnsrl.wi": ["ext_v"],
    "vnsra.wi": ["ext_v"],
    "vnclipu.wi": ["ext_v"],
    "vnclip.wi": ["ext_v"],
    "vredsum.vs": ["ext_v"],
    "vredand.vs": ["ext_v"],
    "vredor.vs": ["ext_v"],
    "vredxor.vs": ["ext_v"],
    "vredminu.vs": ["ext_v"],
    "vredmin.vs": ["ext_v"],
    "vredmaxu.vs": ["ext_v"],
    "vredmax.vs": ["ext_v"],
    "vaaddu.vv": ["ext_v"],
    "vaadd.vv": ["ext_v"],
    "vasubu.vv": ["ext_v"],
    "vasub.vv": ["ext_v"],
    "vmv.x.s": ["ext_v"],
    "vzext.vf8": ["ext_v"],
    "vsext.vf8": ["ext_v"],
    "vzext.vf4": ["ext_v"],
    "vsext.vf4": ["ext_v"],
    "vzext.vf2": ["ext_v"],
    "vsext.vf2": ["ext_v"],
    "vcompress.vm": ["ext_v"],
    "vmandn.mm": ["ext_v"],
    "vmand.mm": ["ext_v"],
    "vmor.mm": ["ext_v"],
    "vmxor.mm": ["ext_v"],
    "vmorn.mm": ["ext_v"],
    "vmnand.mm": ["ext_v"],
    "vmnor.mm": ["ext_v"],
    "vmxnor.mm": ["ext_v"],
    "vmsbf.m": ["ext_v"],
    "vmsof.m": ["ext_v"],
    "vmsif.m": ["ext_v"],
    "viota.m": ["ext_v"],
    "vid.v": ["ext_v"],
    "vcpop.m": ["ext_v"],
    "vfirst.m": ["ext_v"],
    "vdivu.vv": ["ext_v"],
    "vdiv.vv": ["ext_v"],
    "vremu.vv": ["ext_v"],
    "vrem.vv": ["ext_v"],
    "vmulhu.vv": ["ext_v"],
    "vmul.vv": ["ext_v"],
    "vmulhsu.vv": ["ext_v"],
    "vmulh.vv": ["ext_v"],
    "vmadd.vv": ["ext_v"],
    "vnmsub.vv": ["ext_v"],
    "vmacc.vv": ["ext_v"],
    "vnmsac.vv": ["ext_v"],
    "vwaddu.vv": ["ext_v"],
    "vwadd.vv": ["ext_v"],
    "vwsubu.vv": ["ext_v"],
    "vwsub.vv": ["ext_v"],
    "vwaddu.wv": ["ext_v"],
    "vwadd.wv": ["ext_v"],
    "vwsubu.wv": ["ext_v"],
    "vwsub.wv": ["ext_v"],
    "vwmulu.vv": ["ext_v"],
    "vwmulsu.vv": ["ext_v"],
    "vwmul.vv": ["ext_v"],
    "vwmaccu.vv": ["ext_v"],
    "vwmacc.vv": ["ext_v"],
    "vwmaccsu.vv": ["ext_v"],
    "vaaddu.vx": ["ext_v"],
    "vaadd.vx": ["ext_v"],
    "vasubu.vx": ["ext_v"],
    "vasub.vx": ["ext_v"],
    "vmv.s.x": ["ext_v"],
    "vslide1up.vx": ["ext_v"],
    "vslide1down.vx": ["ext_v"],
    "vdivu.vx": ["ext_v"],
    "vdiv.vx": ["ext_v"],
    "vremu.vx": ["ext_v"],
    "vrem.vx": ["ext_v"],
    "vmulhu.vx": ["ext_v"],
    "vmul.vx": ["ext_v"],
    "vmulhsu.vx": ["ext_v"],
    "vmulh.vx": ["ext_v"],
    "vmadd.vx": ["ext_v"],
    "vnmsub.vx": ["ext_v"],
    "vmacc.vx": ["ext_v"],
    "vnmsac.vx": ["ext_v"],
    "vwaddu.vx": ["ext_v"],
    "vwadd.vx": ["ext_v"],
    "vwsubu.vx": ["ext_v"],
    "vwsub.vx": ["ext_v"],
    "vwaddu.wx": ["ext_v"],
    "vwadd.wx": ["ext_v"],
    "vwsubu.wx": ["ext_v"],
    "vwsub.wx": ["ext_v"],
    "vwmulu.vx": ["ext_v"],
    "vwmulsu.vx": ["ext_v"],
    "vwmul.vx": ["ext_v"],
    "vwmaccu.vx": ["ext_v"],
    "vwmacc.vx": ["ext_v"],
    "vwmaccus.vx": ["ext_v"],
    "vwmaccsu.vx": ["ext_v"],
    # V pseudos
    "vl1r.v": ["ext_v"],
    "vl2r.v": ["ext_v"],
    "vl4r.v": ["ext_v"],
    "vl8r.v": ["ext_v"],
    "vneg.v": ["ext_v"],
    "vwcvt.x.x.v": ["ext_v"],
    "vwcvtu.x.x.v": ["ext_v"],
    "vnot.v": ["ext_v"],
    "vncvt.x.x.w": ["ext_v"],
    "vmsgtu.vv": ["ext_v"],
    "vmsgt.vv": ["ext_v"],
    "vmsgeu.vv": ["ext_v"],
    "vmsge.vv": ["ext_v"],
    "vfneg.v": ["ext_v"],
    "vfabs.v": ["ext_v"],
    "vmfgt.vv": ["ext_v"],
    "vmfge.vv": ["ext_v"],
    "vmmv.m": ["ext_v"],
    "vmclr.m": ["ext_v"],
    "vmset.m": ["ext_v"],
    "vmnot.m": ["ext_v"],
}


def analysis_itype(tb_list, total_exec_inst_count, extra_cmdline_args):
    # Explicitly list counts rather than using defaultdict so we can control
    # printing order.
    counts = {
        "ext_i": 0,
        "ext_zicsr": 0,
        "ext_m": 0,
        "ext_a": 0,
        "ext_f": 0,
        "ext_d": 0,
        "ext_zfh": 0,
        "ext_b": 0,
        "ext_zicond": 0,
        "ext_v": 0,
        "ext_other": 0,
        "int_alu": 0,
        "int_move": 0,
        "int_mul": 0,
        "int_div": 0,
        "scalar_store": 0,
        "scalar_load": 0,
        "fp_alu": 0,
        "fp_move": 0,
        "fp_to_int": 0,
        "int_to_fp": 0,
        "fp_convert": 0,
        "fp_fma": 0,
        "fp_mul": 0,
        "fp_div": 0,
        "control_flow": 0,
        "control_flow/cond_branch": 0,
        "control_flow/jump": 0,
        "control_flow/call": 0,
        "control_flow/ret": 0,
        "compressed": 0,
        "noncompressed": 0,
        "stack_store": 0,
        "stack_load": 0,
        # TODO stack loads / stack stores
        # TODO vector int
        # TODO vector FP
        # TODO vector shuffles
    }

    # Collect counts
    execed_total = 0
    for tb in tb_list:
        for inst in tb.insts:
            count_list = inst_types.get(inst.mnemonic)
            if not count_list:
                print(f"Mnemonic '{inst.mnemonic}' unrecognised by itype analysis")
                counts["ext_other"] += tb.ecount
                continue
            for count_name in count_list:
                counts[count_name] += tb.ecount
            if inst.width == 2:
                counts["compressed"] += tb.ecount
            else:
                counts["noncompressed"] += tb.ecount
            if "scalar_store" in count_list and "(sp)" in inst.operands:
                counts["stack_store"] += tb.ecount
            elif "scalar_load" in count_list and "(sp)" in inst.operands:
                counts["stack_load"] += tb.ecount
            execed_total += tb.ecount

    def pct(v):
        return v / execed_total * 100

    # Print counts
    if extra_cmdline_args:
        print(
            f"INFO: Printing only 'total' and counts that match the patterns: {extra_cmdline_args}\n"
        )
        print(f"total: {execed_total} (100%)\n")
        for count_name, count_val in counts.items():
            if count_val != 0 and any(
                fnmatch.fnmatch(count_name, pattern) for pattern in extra_cmdline_args
            ):
                print(f"{count_name}: {count_val} ({pct(count_val):.2f}%)")
    else:
        print(f"total: {execed_total} (100%)\n")
        for count_name, count_val in counts.items():
            if count_val == 0:
                continue
            print(f"{count_name}: {count_val} ({pct(count_val):.2f}%)")


analyses_map = {
    "badinsn": analysis_badinsn,
    "dump": analysis_dump,
    "exec": analysis_exec,
    "mnemonic": analysis_mnemonic,
    "itype": analysis_itype,
}
analyses_desc = {
    "badinsn": "Redundant moves",
    "dump": "Dumping instructions",
    "exec": "Execution stats",
    "mnemonic": "Histogram of mnemonics",
    "itype": "Instruction type breakdown",
}

if __name__ == "__main__":

    def valid_analysis(arg):
        # Must be a key from analyses_desc, or one of those keys in name:args
        # format.
        if ":" not in arg:
            base_arg = arg
        else:
            base_arg, arg_str = arg.split(":", 1)
            if not arg_str:
                raise argparse.ArgumentTypeError(
                    "If ':' is used, it must be followed by a non-empty argument string."
                )
        if base_arg not in analyses_desc:
            msg = f"Analysis must be one of {list(analyses_desc.keys())} or start with these followed by ':args'"
            raise argparse.ArgumentTypeError(msg)
        return arg

    parser = argparse.ArgumentParser(description="instruction stats from qemu log")
    parser.add_argument("binary")
    parser.add_argument(
        "--whole",
        action="append",
        type=valid_analysis,
        default=[],
        help="Analysis to report on a whole filtered input basis. Specify multiple times for multiple analyses.",
    )
    parser.add_argument(
        "--per-tb",
        action="append",
        type=valid_analysis,
        default=[],
        help="Analysis to report on per-TB of filtered input basis. Specify multiple times for multiple analyses.",
    )
    parser.add_argument(
        "--per-fn",
        action="append",
        type=valid_analysis,
        default=[],
        help="Analysis to report on per-function of filtered input basis. Specify multiple times for multiple analyses.",
    )
    parser.add_argument("--filter", action="append", help="Filter to be applied")
    parser.add_argument(
        "--binary-only",
        action="store_true",
        help="Perform analysis without runtime data",
    )
    parser.add_argument(
        "--sort-tbs-by-addr",
        action="store_true",
        help="Sort translation blocks by their address after filters and before calling analyses",
    )
    # TODO: add help that lists the supported analyses and filters

    args = parser.parse_args()
    bin_path = pathlib.Path(args.binary)
    bin_dir = bin_path.parent
    if bin_dir == pathlib.Path():
        bin_dir = pathlib.Path(".")
    log_paths = bin_dir.glob(f"{bin_path.name}.qemu_out*")

    if not bin_path.exists():
        raise SystemExit("Can't find binary")
    if not args.binary_only and not log_paths:
        raise SystemExit("Can't find any .qemu_out")

    def parse_analyses_arg(analyses_list):
        result = []
        for item in analyses_list:
            if ":" in item:
                name, args_str = item.split(":", 1)
                args_list = args_str.split(",")
                result.append([name, *args_list])
            else:
                result.append(item)
        return result

    whole_analyses = parse_analyses_arg(args.whole)
    pertb_analyses = parse_analyses_arg(args.per_tb)
    perfn_analyses = parse_analyses_arg(args.per_fn)

    total_execed_instcount = 0
    if not args.binary_only:
        for log_path in log_paths:
            total_execed_instcount += parse_qemu_out(log_path)
    total_processed_insts = process_bin_with_objdump(bin_path, args.binary_only)
    # Set the executed instruction count to the number of processed
    # instructions if we have no profile data.
    if args.binary_only:
        print(
            "!!!!!!!!!! NOTE: --binary-only was passed meaning no profiling data is available. 'execution count' of each instruction is assumed to be 1."
        )
        total_execed_instcount = total_processed_insts

    filtered_tb_list = list(tbs.values())

    # Apply filters. Note these aren't implemented as reusable functions
    # because most scripted filtering can easily be done with filter and a
    # lambda.
    filters = args.filter or []
    if len(filters) == 0:
        print(f"Applied no filters to the {len(tbs)} input TBs")
    for filt in filters:
        old_len = len(filtered_tb_list)
        if filt.startswith("toptbs:"):
            if args.binary_only:
                raise SystemExit("topbbs filter can't be used without profile data")
            n = int(filt[len("toptbs:") :])
            if n <= 0:
                raise SystemExit("Illegal toptbs filter value")
            filtered_tb_list = filtered_tb_list[:n]
        elif filt.startswith("fn:"):
            fn_names = filt[len("fn:") :].split(",")
            new_filtered_tb_list = []
            for tb in filtered_tb_list:
                if not tb.fn_name:
                    continue
                for fn_name in fn_names:
                    if fnmatch.fnmatch(tb.fn_name, fn_name):
                        new_filtered_tb_list.append(tb)
                        continue
            filtered_tb_list = new_filtered_tb_list
        elif filt.startswith("tb:"):
            tb_addrs = filt[len("tb:") :].split(",")
            new_filtered_tb_list = []
            for tb in filtered_tb_list:
                for tb_addr in tb_addrs:
                    if "-" in tb_addr:
                        low_pc, high_pc = tb_addr.split("-")
                        if tb.pc >= int(low_pc, 16) and tb.pc <= int(high_pc, 16):
                            new_filtered_tb_list.append(tb)
                    elif tb.pc == int(tb_addr, 16):
                        new_filtered_tb_list.append(tb)
            filtered_tb_list = new_filtered_tb_list
        else:
            raise SystemExit("Unrecognised filter")
        print(
            f"Applied {filt} filter, reducing TBs from {old_len} to {len(filtered_tb_list)}"
        )

    if args.sort_tbs_by_addr:
        filtered_tb_list.sort(key=lambda tb: tb.pc)

    # Perform analysis
    for tb in filtered_tb_list:
        for ana in pertb_analyses:
            ana_name, *ana_args = ana if isinstance(ana, list) else (ana,)
            print(f"{analyses_desc[ana_name]} for TB at {hex(tb.pc)} {tb.loc_desc}")
            analyses_map[ana_name]([tb], total_execed_instcount, ana_args)
            print()

    tbs_by_fn = defaultdict(list)
    for tb in filtered_tb_list:
        if not tb.loc_desc:
            continue
        tb_fn_name = tb.loc_desc.strip("<>").split("+")[0]
        tbs_by_fn[tb_fn_name].append(tb)
    for k, v in tbs_by_fn.items():
        for ana in perfn_analyses:
            ana_name, *ana_args = ana if isinstance(ana, list) else (ana,)
            print(f"{analyses_desc[ana_name]} for function {k}:")
            analyses_map[ana_name](v, total_execed_instcount, ana_args)
            print()

    for ana in whole_analyses:
        ana_name, *ana_args = ana if isinstance(ana, list) else (ana,)
        print(f"{analyses_desc[ana_name]} for all filtered input:")
        analyses_map[ana_name](filtered_tb_list, total_execed_instcount, ana_args)
        print()
